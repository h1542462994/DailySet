plugins {
    id 'com.android.application'
    id 'kotlin-android'
    id 'kotlin-kapt'
    id 'org.jetbrains.kotlin.plugin.serialization' version '1.6.21'
    id 'com.google.protobuf'

}

android {
    lintOptions {
        checkReleaseBuilds false
        // Or, if you prefer, you can continue to check for errors in release builds,
        // but continue the build even when errors are found:
        abortOnError false
    }

    sourceSets {
        main {
            proto {
                srcDir "/src/main/proto"
            }
            java {
                srcDir "${buildDir}/generated/source/proto/main/java"
                srcDir "${buildDir}/generated/source/proto/main/kotlin"
                srcDir "${buildDir}/generated/source/proto/main/coroutines"
            }
        }
    }

    signingConfigs {
        debug {
            storePassword keystore_password
            keyAlias keystore_alias
            keyPassword keystore_alias_password
            storeFile file(keystore_path)
        }

        release {
            storePassword keystore_password
            keyAlias keystore_alias
            keyPassword keystore_alias_password
            storeFile file(keystore_path)
        }
    }


    compileSdkVersion rootProject.ext.compileSdkVersion
    buildToolsVersion localBuildToolVersion

    defaultConfig {
        applicationId "org.tty.dailyset"
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode 1
        versionName "1.0.0-alpha01"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
        useIR = true
    }
    buildFeatures {
        compose true
    }
    composeOptions {
        kotlinCompilerExtensionVersion compose_version
    }

    packagingOptions {

        exclude 'META-INF/INDEX.LIST'
        exclude 'META-INF/io.netty.versions.properties'
    }
}



dependencies {
    implementation project(":common")

    implementation "androidx.core:core-ktx:$androidx_core_ktx_version"
    implementation "androidx.appcompat:appcompat:$androidx_appcompact_version"
    implementation "com.google.android.material:material:$material_version"

    // -- implementation Compose Related
    implementation "androidx.compose.ui:ui:$compose_version"
    implementation "androidx.compose.ui:ui-tooling:$compose_version"
    implementation "androidx.compose.material:material:$compose_version"
    implementation "androidx.activity:activity-compose:$androidx_activity_compose_version"

    // --- implementation LifeCycle Related
    implementation "androidx.lifecycle:lifecycle-runtime-ktx:$androidx_lifecycle_ktx_version"
    implementation "androidx.lifecycle:lifecycle-viewmodel-compose:$androidx_lifecycle_compose_version"
    implementation "androidx.compose.runtime:runtime-livedata:$compose_version"
    implementation "androidx.lifecycle:lifecycle-livedata-ktx:$androidx_lifecycle_ktx_version"

    // --- implementation Room Related
    implementation "androidx.room:room-ktx:$androidx_room_version"
    implementation "androidx.room:room-runtime:$androidx_room_version"
    kapt "androidx.room:room-compiler:$androidx_room_version"
    kapt "org.xerial:sqlite-jdbc:$sqlite_jdbc_version"

    // --- implementation Coroutines Related
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:$coroutines_version"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:$coroutines_version"

    // --- implementation Navigation Related
    implementation "androidx.navigation:navigation-compose:$androidx_navigation_compose_version"

    // --- implementation accompanist related
    implementation "com.google.accompanist:accompanist-navigation-material:$accompanist_version"
    implementation "com.google.accompanist:accompanist-navigation-animation:$accompanist_version"
    implementation "com.google.accompanist:accompanist-pager:$accompanist_version"

    // --- implementation retrofit related
    implementation("com.squareup.retrofit2:retrofit:2.9.0")
//    implementation("com.squareup.retrofit2:converter-gson:2.9.0")
    implementation("org.jetbrains.kotlinx:kotlinx-serialization-json:1.3.2")
    implementation("com.jakewharton.retrofit:retrofit2-kotlinx-serialization-converter:0.8.0")
    implementation("com.squareup.okhttp3:logging-interceptor:4.9.3")

    // --- implementation grpc related
    implementation("io.grpc:grpc-okhttp:${grpcVersion}")
    implementation("io.grpc:grpc-stub:${grpcVersion}")
    implementation("io.grpc:grpc-protobuf-lite:${grpcVersion}")
    implementation("javax.annotation:javax.annotation-api:1.3.2")

    implementation("com.github.marcoferrer.krotoplus:kroto-plus-coroutines:${krotoPlusVersion}") {
        exclude group: "io.grpc"
        exclude group: "com.google.protobuf"
    }
    implementation("com.github.marcoferrer.krotoplus:kroto-plus-message:${krotoPlusVersion}") {
        exclude group: "io.grpc"
        exclude group: "com.google.protobuf"
    }

    implementation("org.bouncycastle:bcprov-jdk15on:1.70")


    testImplementation "junit:junit:$junit_version"
    androidTestImplementation "androidx.test.ext:junit:$androidx_junit_version"
    androidTestImplementation "androidx.test.espresso:espresso-core:$androidx_espresso_veresion"
}

protobuf {
    protoc {
        artifact = "com.google.protobuf:protoc:${protobufVersion}"
    }
    plugins {
        grpc {
            artifact = "io.grpc:protoc-gen-grpc-java:${grpcVersion}"
        }
        javalite {
            artifact = "com.google.protobuf:protoc-gen-java-lite:${protobufVersion}"
        }
        coroutines {
            artifact = "com.github.marcoferrer.krotoplus:protoc-gen-grpc-coroutines:${krotoPlusVersion}"
        }
        kroto {
            artifact = "com.github.marcoferrer.krotoplus:protoc-gen-kroto-plus:$krotoPlusVersion"
        }
    }
    generateProtoTasks {
        def krotoConfig = file("krotoPlusConfig.json")
        all().each { task ->
            task.inputs.files krotoConfig
            task.builtins {
                java { option 'lite' }
            }
            task.plugins {
                grpc {
                    option 'lite'
                }
                coroutines {}
                kroto {
                    outputSubDir = "java"
                    // warning: must use path string with it. FIXME: use relative path instead. @cht 2022/5/3
                    option "ConfigPath = src/main/res/krotoPlusConfig.json"
                }
            }
        }

    }
}